// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/go-metrics/internal/server/app (interfaces: AllMetricsStorage,BackupFormatter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/go-metrics/internal/server/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAllMetricsStorage is a mock of AllMetricsStorage interface.
type MockAllMetricsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAllMetricsStorageMockRecorder
}

// MockAllMetricsStorageMockRecorder is the mock recorder for MockAllMetricsStorage.
type MockAllMetricsStorageMockRecorder struct {
	mock *MockAllMetricsStorage
}

// NewMockAllMetricsStorage creates a new mock instance.
func NewMockAllMetricsStorage(ctrl *gomock.Controller) *MockAllMetricsStorage {
	mock := &MockAllMetricsStorage{ctrl: ctrl}
	mock.recorder = &MockAllMetricsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllMetricsStorage) EXPECT() *MockAllMetricsStorageMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockAllMetricsStorage) GetAllMetrics(arg0 context.Context) ([]domain.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", arg0)
	ret0, _ := ret[0].([]domain.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockAllMetricsStorageMockRecorder) GetAllMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockAllMetricsStorage)(nil).GetAllMetrics), arg0)
}

// SetAllMetrics mocks base method.
func (m *MockAllMetricsStorage) SetAllMetrics(arg0 context.Context, arg1 []domain.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAllMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAllMetrics indicates an expected call of SetAllMetrics.
func (mr *MockAllMetricsStorageMockRecorder) SetAllMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllMetrics", reflect.TypeOf((*MockAllMetricsStorage)(nil).SetAllMetrics), arg0, arg1)
}

// MockBackupFormatter is a mock of BackupFormatter interface.
type MockBackupFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockBackupFormatterMockRecorder
}

// MockBackupFormatterMockRecorder is the mock recorder for MockBackupFormatter.
type MockBackupFormatterMockRecorder struct {
	mock *MockBackupFormatter
}

// NewMockBackupFormatter creates a new mock instance.
func NewMockBackupFormatter(ctrl *gomock.Controller) *MockBackupFormatter {
	mock := &MockBackupFormatter{ctrl: ctrl}
	mock.recorder = &MockBackupFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackupFormatter) EXPECT() *MockBackupFormatterMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBackupFormatter) Read(arg0 context.Context) ([]domain.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].([]domain.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBackupFormatterMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBackupFormatter)(nil).Read), arg0)
}

// Write mocks base method.
func (m *MockBackupFormatter) Write(arg0 context.Context, arg1 []domain.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockBackupFormatterMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockBackupFormatter)(nil).Write), arg0, arg1)
}
