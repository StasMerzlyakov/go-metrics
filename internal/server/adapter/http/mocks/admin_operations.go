// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/go-metrics/internal/server/adapter/http/handler (interfaces: AdminOperation)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminOperation is a mock of AdminOperation interface.
type MockAdminOperation struct {
	ctrl     *gomock.Controller
	recorder *MockAdminOperationMockRecorder
}

// MockAdminOperationMockRecorder is the mock recorder for MockAdminOperation.
type MockAdminOperationMockRecorder struct {
	mock *MockAdminOperation
}

// NewMockAdminOperation creates a new mock instance.
func NewMockAdminOperation(ctrl *gomock.Controller) *MockAdminOperation {
	mock := &MockAdminOperation{ctrl: ctrl}
	mock.recorder = &MockAdminOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminOperation) EXPECT() *MockAdminOperationMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockAdminOperation) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockAdminOperationMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAdminOperation)(nil).Ping), arg0)
}
