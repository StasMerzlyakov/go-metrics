// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/go-metrics/internal/server/adapter/http/handler (interfaces: AdminApp)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminApp is a mock of AdminApp interface.
type MockAdminApp struct {
	ctrl     *gomock.Controller
	recorder *MockAdminAppMockRecorder
}

// MockAdminAppMockRecorder is the mock recorder for MockAdminApp.
type MockAdminAppMockRecorder struct {
	mock *MockAdminApp
}

// NewMockAdminApp creates a new mock instance.
func NewMockAdminApp(ctrl *gomock.Controller) *MockAdminApp {
	mock := &MockAdminApp{ctrl: ctrl}
	mock.recorder = &MockAdminAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminApp) EXPECT() *MockAdminAppMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockAdminApp) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockAdminAppMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAdminApp)(nil).Ping), arg0)
}
