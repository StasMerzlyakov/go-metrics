// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/go-metrics/internal/server/adapter/http/handler (interfaces: MetricApp)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/go-metrics/internal/server/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricApp is a mock of MetricApp interface.
type MockMetricApp struct {
	ctrl     *gomock.Controller
	recorder *MockMetricAppMockRecorder
}

// MockMetricAppMockRecorder is the mock recorder for MockMetricApp.
type MockMetricAppMockRecorder struct {
	mock *MockMetricApp
}

// NewMockMetricApp creates a new mock instance.
func NewMockMetricApp(ctrl *gomock.Controller) *MockMetricApp {
	mock := &MockMetricApp{ctrl: ctrl}
	mock.recorder = &MockMetricAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricApp) EXPECT() *MockMetricAppMockRecorder {
	return m.recorder
}

// AddCounter mocks base method.
func (m *MockMetricApp) AddCounter(arg0 context.Context, arg1 *domain.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCounter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCounter indicates an expected call of AddCounter.
func (mr *MockMetricAppMockRecorder) AddCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCounter", reflect.TypeOf((*MockMetricApp)(nil).AddCounter), arg0, arg1)
}

// GetAllMetrics mocks base method.
func (m *MockMetricApp) GetAllMetrics(arg0 context.Context) ([]domain.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", arg0)
	ret0, _ := ret[0].([]domain.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockMetricAppMockRecorder) GetAllMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockMetricApp)(nil).GetAllMetrics), arg0)
}

// GetCounter mocks base method.
func (m *MockMetricApp) GetCounter(arg0 context.Context, arg1 string) (*domain.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", arg0, arg1)
	ret0, _ := ret[0].(*domain.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockMetricAppMockRecorder) GetCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockMetricApp)(nil).GetCounter), arg0, arg1)
}

// GetGauge mocks base method.
func (m *MockMetricApp) GetGauge(arg0 context.Context, arg1 string) (*domain.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", arg0, arg1)
	ret0, _ := ret[0].(*domain.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockMetricAppMockRecorder) GetGauge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockMetricApp)(nil).GetGauge), arg0, arg1)
}

// SetGauge mocks base method.
func (m *MockMetricApp) SetGauge(arg0 context.Context, arg1 *domain.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockMetricAppMockRecorder) SetGauge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockMetricApp)(nil).SetGauge), arg0, arg1)
}
