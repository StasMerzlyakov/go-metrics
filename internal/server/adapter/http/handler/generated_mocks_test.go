// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/go-metrics/internal/server/adapter/http/handler (interfaces: AdminApp,MetricApp)

// Package handler_test is a generated GoMock package.
package handler_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/go-metrics/internal/server/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAdminApp is a mock of AdminApp interface.
type MockAdminApp struct {
	ctrl     *gomock.Controller
	recorder *MockAdminAppMockRecorder
}

// MockAdminAppMockRecorder is the mock recorder for MockAdminApp.
type MockAdminAppMockRecorder struct {
	mock *MockAdminApp
}

// NewMockAdminApp creates a new mock instance.
func NewMockAdminApp(ctrl *gomock.Controller) *MockAdminApp {
	mock := &MockAdminApp{ctrl: ctrl}
	mock.recorder = &MockAdminAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminApp) EXPECT() *MockAdminAppMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockAdminApp) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockAdminAppMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAdminApp)(nil).Ping), arg0)
}

// MockMetricApp is a mock of MetricApp interface.
type MockMetricApp struct {
	ctrl     *gomock.Controller
	recorder *MockMetricAppMockRecorder
}

// MockMetricAppMockRecorder is the mock recorder for MockMetricApp.
type MockMetricAppMockRecorder struct {
	mock *MockMetricApp
}

// NewMockMetricApp creates a new mock instance.
func NewMockMetricApp(ctrl *gomock.Controller) *MockMetricApp {
	mock := &MockMetricApp{ctrl: ctrl}
	mock.recorder = &MockMetricAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricApp) EXPECT() *MockMetricAppMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMetricApp) Get(arg0 context.Context, arg1 domain.MetricType, arg2 string) (*domain.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricAppMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricApp)(nil).Get), arg0, arg1, arg2)
}

// GetAllMetrics mocks base method.
func (m *MockMetricApp) GetAllMetrics(arg0 context.Context) ([]domain.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", arg0)
	ret0, _ := ret[0].([]domain.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockMetricAppMockRecorder) GetAllMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockMetricApp)(nil).GetAllMetrics), arg0)
}

// Update mocks base method.
func (m *MockMetricApp) Update(arg0 context.Context, arg1 *domain.Metrics) (*domain.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*domain.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMetricAppMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetricApp)(nil).Update), arg0, arg1)
}

// UpdateAll mocks base method.
func (m *MockMetricApp) UpdateAll(arg0 context.Context, arg1 []domain.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockMetricAppMockRecorder) UpdateAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockMetricApp)(nil).UpdateAll), arg0, arg1)
}
